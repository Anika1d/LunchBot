from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, ConversationHandler, filters
from data.user import User, UserSex
import logging
from uuid import uuid4

# –õ–æ–≥–≥–∏–Ω–≥
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–•
REGISTER, GET_NAME, GET_SEX, GET_PARTNER_PREFERENCE, GET_LUNCH_TIME, PREFERENCES, FEEDBACK = range(7)

# –ü–∞—Ä–æ–¥–∏—è –Ω–∞ –ë–î
users = {}
lunch_matches = {}
feedbacks = {}

# –†–µ–≥–∞
async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã \n–¢—ã –ø–æ–ø–∞–ª –≤ LunchBuddy ‚Äì –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞!\n"
        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä–∞–ø–µ–∑–Ω–∏–∫–æ–≤, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ –∏ –∑–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É.\n"
        "–ü–æ–µ—Ö–∞–ª–∏! üöÄ\n\n–í–≤–µ–¥–∏—Ç–µ –ò–º—è (–∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º):"
    )
    return GET_NAME

# –ò–º—è
async def get_name(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    name = update.message.text
    users[user_id] = {"username": update.message.from_user.username, "name": name}
    await update.message.reply_text("–ü–æ–ª:", reply_markup=ReplyKeyboardMarkup([["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]], one_time_keyboard=True))
    return GET_SEX

# –ü–æ–ª
async def get_sex(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    sex = UserSex.MALE if update.message.text == "–ú—É–∂—Å–∫–æ–π" else UserSex.FEMALE
    users[user_id]["sex"] = sex
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–µ–º –í–∞–º –±—ã–ª–æ –±—ã –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –æ–±–µ–¥–∞—Ç—å?", 
        reply_markup=ReplyKeyboardMarkup([["–î–µ–≤—É—à–∫–∞", "–ü–∞—Ä–µ–Ω—å", "–ö–æ–º–ø–∞–Ω–∏—è", "–ù–µ–≤–∞–∂–Ω–æ"]], one_time_keyboard=True)
    )
    return GET_PARTNER_PREFERENCE

# –ü—Ä–µ—Ñ—ã
async def get_partner_preference(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]["partner_preference"] = update.message.text
    await update.message.reply_text(
        "–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ–±–µ–¥–∞:", 
        reply_markup=ReplyKeyboardMarkup(
            [["12:00-13:00", "13:00-14:00", "14:00-15:00"], ["15:00-16:00", "16:00-17:00"]],
            one_time_keyboard=True
        )
    )
    return GET_LUNCH_TIME

# –í—Ä–µ–º—è
async def get_lunch_time(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]["lunch_time"] = update.message.text
    qr_code = uuid4()
    users[user_id]["qr_code"] = qr_code
    await update.message.reply_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à Qr-–∫–æ–¥: {qr_code}")
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ–∫–∞ –ø–æ—Ö —è –¥—É–º–∞—é)
async def save_preferences(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]["preferences"] = update.message.text
    await update.message.reply_text("–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    return ConversationHandler.END

# –ú—ç—Ç—á–∏–Ω–≥
async def find_buddy(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_pref = users[user_id].get("partner_preference")
    user_lunch_time = users[user_id].get("lunch_time")
    
    for uid, data in users.items():
        # –ú—ç—Ç—á
        if uid != user_id and data.get("partner_preference") == user_pref and data.get("lunch_time") == user_lunch_time:
            lunch_matches[user_id] = uid
            lunch_matches[uid] = user_id
            await context.bot.send_message(chat_id=user_id, text=f"–î–ª—è –æ–±–µ–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç: @{users[uid]['username']}")
            await context.bot.send_message(chat_id=uid, text=f"–î–ª—è –æ–±–µ–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç: @{users[user_id]['username']}")
            return
    
    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –¥–ª—è –æ–±–µ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.")

# –†–µ–º–∞–π–Ω–¥–µ—Ä
async def remind(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    match_id = lunch_matches.get(user_id)
    
    if match_id:
        await context.bot.send_message(
            chat_id=user_id, 
            text=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —É –í–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –æ–±–µ–¥ —Å @{users[match_id]['username']}!"
        )
    else:
        await update.message.reply_text("–£ –í–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–∞ –æ–±–µ–¥.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–¥–±–µ–∫–∞
async def feedback(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ –í–∞—à –æ–±–µ–¥ –æ—Ç 1 –¥–æ 5 –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ:")
    return FEEDBACK

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–¥–±–µ–∫–∞
async def save_feedback(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    score, *review = update.message.text.split(maxsplit=1)
    score = float(score)
    review = review[0] if review else ""
    
    if user_id in lunch_matches:
        partner_id = lunch_matches[user_id]
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–∞—Ö—Ä–µ–Ω –Ω–µ –Ω–∞–¥–æ, –æ–±—Å—É–¥–∏—Ç–µ –∏ —É–¥–∞–ª–∏—Ç–µ –µ—Å–ª–∏ —á—Ç–æ)
        if "rating" in users[partner_id]:
            users[partner_id]["rating"] = (users[partner_id]["rating"] + score) / 2
        else:
            users[partner_id]["rating"] = score
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        feedbacks[user_id] = {"partner_id": partner_id, "score": score, "review": review}
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    else:
        await update.message.reply_text("–û–±–µ–¥ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è, –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–µ–ª—å–∑—è.")
    
    return ConversationHandler.END

# –ö–•
def main() -> None:
    application = Application.builder().token("7700731666:AAESsLAY8Bu_KNNYBm3KCAL4ugKZWGVzbGw").build()

    # —Ä–µ–≥
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT, get_name)],
            GET_SEX: [MessageHandler(filters.TEXT, get_sex)],
            GET_PARTNER_PREFERENCE: [MessageHandler(filters.TEXT, get_partner_preference)],
            GET_LUNCH_TIME: [MessageHandler(filters.TEXT, get_lunch_time)],
            PREFERENCES: [MessageHandler(filters.TEXT, save_preferences)],
            FEEDBACK: [MessageHandler(filters.TEXT, save_feedback)],
        },
        fallbacks=[]
    )
    application.add_handler(conv_handler)

    # –î—Ä—É–≥–∏–µ –∫–æ–º–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("find_buddy", find_buddy))
    application.add_handler(CommandHandler("remind", remind))
    application.add_handler(CommandHandler("feedback", feedback))

    # –õ–∞–Ω—á
    application.run_polling()

if __name__ == "__main__":
    main()
